name: CI Pipeline

on:
  pull_request:
    branches:
      - master  # or any branch you want to run tests on

jobs:
  unit-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '21'  # specify the Java version you're using

    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2

    - name: Run Unit Tests
      run: ./gradlew test

    - name: Generate Unit Test Report
      run: |
        mkdir -p reports/unit-tests
        cp -r build/test-results/test/* reports/unit-tests/
      continue-on-error: true

  e2e-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '21'

    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2

    - name: Run E2E Tests
      run: ./gradlew testNG # Assuming your e2e tests are under e2eTest task

    - name: Generate E2E Test Report
      run: |
        mkdir -p reports/e2e-tests
        cp -r build/test-results/e2eTest/* reports/e2e-tests/
      continue-on-error: true
  test:
    name: Run integration test using keria:${{ matrix.keria-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest' ]
        keria-version: [ '0.2.0-dev3' ]
        node-version: [ '20' ]
    env:
      KERIA_IMAGE_TAG: ${{ matrix.keria-version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: install deps
        run: npm ci
      - name: Build
        run: npm run build
      - name: Print docker compose config
        run: docker compose config
      - name: Start dependencies
        run: docker compose up deps --pull always
      - name: Run integration test
        run: npm run test:integration
      - name: Print logs
        run: docker compose logs
        if: always()